{"version":3,"sources":["../../../src/app/controllers/auth.controller.js"],"names":["status","message","sendOtp","ctx","body","request","OtpService","phone_number","action","verifyOtp","next","otp","res","json","errors","Otp","query","findOne","otpInDb","JwtService","verify","otp_token","decoded","create","password","email","first_name","last_name","other_name","user_gender","address","marital_status","employment_status","educational_background","baptismal_status","role","User","userInDb","Role","where","limit","first","e","console","log","roleInDb","random","min","max","Math","floor","insert","member_code","toString","userData","token","sign","user","update","state","patchAndFetchById","id","user_data","updateDeviceToken","DeviceToken","user_id","login","bcrypt","compare","isValid","me"],"mappings":"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","sourcesContent":["import User from '../models/user'\nimport Role from '../models/role'\nimport JwtService from '../services/JwtService'\nimport OtpService from '../services/OtpService'\nimport Otp from '../models/otp'\nimport bcrypt from 'bcryptjs'\nimport {\n  Unauthorized,\n  encryptPassword,\n  UnprocessableEntity,\n  NotFound\n} from '../helpers'\nimport DeviceToken from '../models/device_token'\nconst status = 'success'\nconst message = 'Success!'\n\nexport const sendOtp = async ctx => {\n  const { body } = ctx.request\n\n  await OtpService.sendOtp({\n    phone_number: body.phone_number,\n    action: body.action\n  })\n\n  return {\n    status: 'success',\n    message: 'Otp sent successfully'\n  }\n}\n\nexport const verifyOtp = async (ctx, next) => {\n  const { body } = ctx.request\n\n  if (!body.otp) {\n    return res.status(400).json({\n      status: 'error',\n      message: 'Validation Error',\n      errors: {\n        otp: ['otp is required']\n      }\n    })\n  }\n\n  const otpInDb = await Otp.query()\n    .findOne({\n      phone_number: body.phone_number,\n      action: body.action\n    })\n    .catch(() => false)\n\n  if (!otpInDb) {\n    ctx.throw(404, 'no otp has been sent to this number')\n  }\n\n  const { status, message, decoded } = JwtService.verify(otpInDb.otp_token)\n\n  if (!status) {\n    ctx.throw(400, `otp is ${message}`)\n  }\n\n  if (decoded.otp !== body.otp) {\n    ctx.throw(400, 'Invalid otp')\n  }\n\n  return next()\n}\n\nexport const create = async ctx => {\n  ctx.request.body.password = await encryptPassword(ctx.request.body.password)\n\n  const {\n    phone_number,\n    email,\n    first_name,\n    last_name,\n    other_name,\n    user_gender,\n    password,\n    address,\n    marital_status,\n    employment_status,\n    educational_background,\n    baptismal_status,\n    role\n  } = ctx.request.body\n\n  let userInDb = await User.query()\n    .findOne({\n      phone_number\n    })\n\n    .catch(() => false)\n\n  let roleInDb = await Role.query()\n    .where('name', role)\n    .limit(1)\n    .first()\n\n    .catch(e => {\n      console.log(e)\n      throw NotFound('Role not found')\n    })\n\n  const random = (min, max) => Math.floor(Math.random() * (max - min)) + min\n\n  if (!userInDb) {\n    const userData = await await User.query()\n      .insert({\n        email,\n        first_name,\n        last_name,\n        other_name,\n        user_gender,\n        password,\n        address,\n        marital_status,\n        employment_status,\n        educational_background,\n        baptismal_status,\n        role,\n        member_code: random(100000, 999999).toString()\n      })\n\n      .catch(e => {\n        console.log(e)\n        throw UnprocessableEntity('Invalid Body')\n      })\n    return {\n      status,\n      message,\n      ...userData,\n      token: JwtService.sign({ user: userData.user })\n    }\n  } else {\n    throw UnprocessableEntity('User already exists')\n  }\n}\n\nexport const update = async ctx => {\n  const { body } = ctx.request\n  const { user } = ctx.state.user\n\n  if (body.role) {\n    let roleInDb = await Role.query()\n      .where('name', role)\n      .limit(1)\n      .first()\n\n      .catch(e => {\n        console.log(e)\n        throw NotFound('Role not found')\n      })\n  }\n\n  const user_data = await User.query().patchAndFetchById(user.id, body)\n\n  return {\n    status: 'success',\n    message: 'Update Successful',\n    ...user_data\n  }\n}\n\nexport const updateDeviceToken = async ctx => {\n  const { body } = ctx.request\n  const { id } = ctx.state.user.user\n  const user = await User.query()\n    .findOne({ id })\n    .catch(() => {\n      throw Unauthorized('User not found please register')\n    })\n\n  const userData = await DeviceToken.query()\n    .insert({\n      user_id: user.id,\n      ...body\n    })\n    .catch(() => {\n      throw UnprocessableEntity('Invalid body')\n    })\n\n  return {\n    status: 'success',\n    message: 'Device Token Update Successful',\n    ...userData\n  }\n}\n\nexport const login = async ctx => {\n  const { body } = ctx.request\n\n  const user = await User.query()\n    .findOne({\n      email: body.email\n    })\n    .catch(() => {\n      throw Unauthorized('User not found. Please sign up')\n    })\n\n  const isValid = await bcrypt.compare(body.password, user.password)\n\n  if (!isValid) {\n    throw Unauthorized('Unauthorized, invalid password')\n  }\n\n  return {\n    status,\n    message,\n    ...user,\n    token: JwtService.sign({ user })\n  }\n}\n\nexport const me = async ctx => {\n  const { user } = ctx.state.user\n\n  const user_data = await User.query()\n    .findOne({\n      id: user.id\n    })\n    //  .withGraphFetched('[free_deliveries, referral_code]')\n    .catch(e => {\n      console.log(e)\n      return false\n    })\n\n  if (!user_data) {\n    throw Unauthorized('User not found. Please sign up')\n  } else {\n    return {\n      status,\n      message: 'User data gotten successfully',\n      ...user_data\n    }\n  }\n}\n"],"file":"auth.controller.js"}