{"version":3,"sources":["../../../src/app/services/UserService.js"],"names":["newCustomerService","phone_number","Promise","all","User","query","insert","role","active","user","createUserSubTables","updateNewUserService","personal_details","password","dob","UserDobUpdated","where","user_id","id","user_dob_updated","patchAndFetchById","e","console","log","user_data","FreeDelivery","UserSetting","ReferralCode","code","toUpperCase","free_delivery","user_setting","referral_code"],"mappings":"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","sourcesContent":["import { transaction } from 'objection'\n\nimport User from '../models/user'\nimport Role from '../models/role'\nimport FreeDelivery from '../models/free_delivery'\nimport UserSetting from '../models/user_setting'\nimport ReferralCode from '../models/referral_code'\nimport UserDobUpdated from '../models/user_dob_updated'\n\nimport {\n  encryptPassword,\n  makeCode,\n  Unauthorized,\n  UnprocessableEntity\n} from '../helpers'\n\nexport const newCustomerService = async phone_number => {\n  const [user] = await Promise.all([\n    User.query().insert({\n      phone_number,\n      role: 'CUSTOMER',\n      active: true\n    })\n  ])\n\n  await createUserSubTables(user)\n\n  return {\n    user\n  }\n}\n\nexport const updateNewUserService = async (personal_details, user) => {\n  //  clean up data\n  if (personal_details.password) {\n    personal_details.password = await encryptPassword(personal_details.password)\n  }\n  if (personal_details.dob) {\n    const user_dob_updated = await UserDobUpdated.query()\n      .where({\n        user_id: user.id\n      })\n      .catch(() => false)\n    if (user_dob_updated) {\n      throw UnprocessableEntity('User date of birth can only be changed once')\n    } else {\n      await UserDobUpdated.query().insert({\n        user_id: user.id\n      })\n    }\n  }\n  const user_data = await User.query()\n    .patchAndFetchById(user.id, personal_details)\n    .catch(e => {\n      console.log(e)\n      throw Unauthorized('User not found please register')\n    })\n\n  return {\n    user_data\n  }\n}\n\nexport const createUserSubTables = async user => {\n  const [free_delivery, user_setting, referral_code] = await Promise.all([\n    FreeDelivery.query().insert({\n      user_id: user.id\n    }),\n    UserSetting.query().insert({\n      user_id: user.id\n    }),\n    ReferralCode.query().insert({\n      user_id: user.id,\n      code: makeCode(6).toUpperCase()\n    })\n  ])\n  return {\n    free_delivery,\n    user_setting,\n    referral_code\n  }\n}\n\nexport default {\n  newCustomerService,\n  updateNewUserService\n}\n"],"file":"UserService.js"}