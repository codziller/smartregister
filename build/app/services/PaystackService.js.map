{"version":3,"sources":["../../../src/app/services/PaystackService.js"],"names":["handle","data","customer","email","phone_number","order","body","User","query","where","limit","first","e","console","log","user","order_details","use_wallet","wallet_amount","id","amount","UserCard","insert","user_id","auth","authorization","authorization_code","last_four_digit","last4","status","country_code","expiry_month","exp_month","expiry_year","exp_year","signature","bank","reusable","card_name","card_type","ctx","request","state","chargeCard","method","url","headers","Authorization","PAYSTACK_SECRET","response","reference","message"],"mappings":"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","sourcesContent":["import User from '../models/user'\nimport UserCard from '../models/user_card'\nimport { createOrder } from '../controllers/order.controller'\nimport { NotFound, UnprocessableEntity } from '../helpers'\nimport { transaction } from 'objection'\nimport {\n  createTransactionForOrder,\n  createTransactionForWallet\n} from './TransactionService'\nimport axios from 'axios'\nimport { PAYSTACK_SECRET } from '../config'\n\n/**\n * Handle Charge Success\n */\n// paystack/webhook\nexport const handle = async data => {\n  const { email, phone_number, order, body } = data.customer\n\n  // get user details\n  const user = await User.query()\n    .where('phone_number', phone_number)\n    .limit(1)\n    .first()\n    .catch(e => {\n      console.log(e)\n      throw NotFound('User not found')\n    })\n\n  // create transaction if order true, else add amount to wallet if order false\n  if (order) {\n    if (body.order_details.use_wallet) {\n      await createTransactionForWallet(\n        'Transfer',\n        'Debit',\n        body.order_details.wallet_amount,\n        user.id,\n        `Order Payment of ₦${body.order_details.wallet_amount} by Wallet`,\n        `Order Payment of ₦${body.order_details.wallet_amount} by Wallet`\n      )\n    }\n    await createTransactionForOrder(\n      'Transfer',\n      'Debit',\n      data.amount,\n      user.id,\n      `Order Payment of ₦${data.amount} by Card`,\n      `Order Payment of ₦${data.amount} by Card`\n    )\n  } else {\n    await createTransactionForWallet(\n      'Deposit',\n      'Credit',\n      data.amount,\n      user.id,\n      `Deposit of ₦${data.amount} By Card`,\n      `Deposit of ₦${data.amount} By Card`\n    )\n  }\n  console.log('before card')\n  // save card\n  await UserCard.query()\n    .insert({\n      user_id: user.id,\n      auth: data.authorization.authorization_code,\n      last_four_digit: data.authorization.last4,\n      status: true,\n      country_code: data.authorization.country_code,\n      expiry_month: data.authorization.exp_month,\n      expiry_year: data.authorization.exp_year,\n      signature: data.authorization.signature,\n      bank: data.authorization.bank,\n      reusable: data.authorization.reusable,\n      card_name: data.authorization.card_type\n    })\n    .catch(e => {\n      console.log(e)\n      throw UnprocessableEntity('Invalid Body')\n    })\n\n  // create order if true\n  if (order) {\n    let ctx = {\n      request: {\n        body: body\n      },\n      state: {\n        user: {\n          user: user\n        }\n      }\n    }\n    console.log(ctx)\n    await createOrder(ctx)\n  }\n}\n\nexport const chargeCard = async data => {\n  try {\n    const response = await axios({\n      method: 'post',\n      url: 'https://api.paystack.co/transaction/charge_authorization',\n      data,\n      headers: {\n        Authorization: `Bearer ${PAYSTACK_SECRET}`,\n        'Content-Type': 'application/json'\n      }\n    })\n\n    return {\n      status: response.data.data.status,\n      amount: response.data.data.amount,\n      reference: response.data.data.reference,\n      authorization: response.data.data.authorization\n    }\n  } catch (error) {\n    throw UnprocessableEntity(error.response.data.message)\n  }\n}\n"],"file":"PaystackService.js"}