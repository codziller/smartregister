{"version":3,"sources":["../../../src/app/services/TransactionService.js"],"names":["transaction_types","transaction_actions","createTransactionForWallet","transaction_type","transaction_action","amount","user_id","description","reason","Transaction","User","query","findById","e","console","log","user","balance","Number","Promise","all","insert","id","transaction_status","patchAndFetchById","toString","transaction_data","user_data","createTransactionForOrder"],"mappings":"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","sourcesContent":["import Transaction from '../models/transaction'\nimport { transaction } from 'objection'\nimport User from '../models/user'\nimport { UnprocessableEntity } from '../helpers'\n\nconst transaction_types = ['Deposit', 'Transfer', 'Withdraw']\nconst transaction_actions = ['Credit', 'Debit']\n\nexport const createTransactionForWallet = async (\n  transaction_type,\n  transaction_action,\n  amount,\n  user_id,\n  description,\n  reason\n) => {\n  return await transaction(Transaction, User, async (Transaction, User) => {\n    const user = await User.query()\n      .findById(user_id)\n      .catch(e => {\n        console.log(e)\n        throw UnprocessableEntity('Invalid Body')\n      })\n    let balance = Number(user.balance)\n    switch (transaction_action) {\n      case 'Debit':\n        balance -= Number(amount)\n        break\n      case 'Credit':\n        balance += Number(amount)\n        break\n      default:\n        throw UnprocessableEntity('Invalid Transaction Action')\n    }\n    const [transaction_data, user_data] = await Promise.all([\n      Transaction.query()\n        .insert({\n          amount,\n          user_id: user.id,\n          transaction_type,\n          transaction_action,\n          transaction_status: 'Success',\n          description,\n          reason\n        })\n        .catch(e => {\n          console.log(e)\n          throw UnprocessableEntity('Invalid Transaction body')\n        }),\n\n      User.query()\n        .patchAndFetchById(user.id, {\n          balance: balance.toString()\n        })\n        .catch(e => {\n          console.log(e)\n          throw UnprocessableEntity('Invalid User body')\n        })\n    ])\n\n    return {\n      transaction_data,\n      user_data\n    }\n  })\n}\n\nexport const createTransactionForOrder = async (\n  transaction_type,\n  transaction_action,\n  amount,\n  user_id,\n  description,\n  reason\n) => {\n  return await transaction(Transaction, User, async (Transaction, User) => {\n    const user = await User.query()\n      .findById(user_id)\n      .catch(e => {\n        console.log(e)\n        throw UnprocessableEntity('Invalid Body')\n      })\n    let balance = Number(user.balance)\n    switch (transaction_action) {\n      case 'Debit':\n        balance -= Number(amount)\n        break\n      case 'Credit':\n        balance += Number(amount)\n        break\n      default:\n        throw UnprocessableEntity('Invalid Transaction Action')\n    }\n    const [transaction_data] = await Promise.all([\n      Transaction.query()\n        .insert({\n          amount,\n          user_id: user.id,\n          transaction_type,\n          transaction_action,\n          transaction_status: 'Success',\n          description,\n          reason\n        })\n        .catch(e => {\n          console.log(e)\n          throw UnprocessableEntity('Invalid Transaction body')\n        })\n    ])\n\n    return {\n      transaction_data\n    }\n  })\n}\n"],"file":"TransactionService.js"}