{"version":3,"sources":["../../../src/app/helpers/errors.js"],"names":["NotFound","message","name","statusCode","errorCode","BadRequest","InternalServerError","UnprocessableEntity","Unauthorized","Deleted","deleted","getErrorByStatusCode","internalError","err","originalError","errorLib","status","toString","errorHandling","UniqueViolationError","type","columns","replace","NotNullViolationError","column","ForeignKeyViolationError","data","table","constraint","CheckViolationError","DataError","DBError"],"mappings":"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","sourcesContent":["import {\n  DBError,\n  UniqueViolationError,\n  NotNullViolationError,\n  ForeignKeyViolationError,\n  CheckViolationError,\n  DataError\n} from 'objection'\n\nexport const NotFound = (\n  message = 'The requested resource could not be found'\n) => ({\n  name: 'NotFound',\n  message,\n  statusCode: 404,\n  errorCode: 404\n})\n\nexport const BadRequest = (message = 'The json data is malformed') => ({\n  name: 'BadRequest',\n  message,\n  statusCode: 400,\n  errorCode: 400\n})\n\nexport const InternalServerError = (\n  message = 'The API did something wrong'\n) => ({\n  name: 'InternalServerError',\n  message,\n  statusCode: 500,\n  errorCode: 500\n})\n\nexport const UnprocessableEntity = message => ({\n  name: 'Unprocessable Entity',\n  message,\n  statusCode: 422,\n  errorCode: 422\n})\n\nexport const Unauthorized = (message = 'Incorrect username or password') => ({\n  name: 'Unauthorized',\n  message,\n  statusCode: 401,\n  errorCode: 401\n})\n\nexport const Deleted = (message = 'Successfully deleted') => ({\n  name: 'Deleted',\n  message,\n  deleted: true,\n  statusCode: 200,\n  errorCode: 200\n})\n\nexport const getErrorByStatusCode = statusCode => {\n  switch (statusCode) {\n    case 404:\n      return NotFound\n    case 400:\n      return BadRequest\n    case 500:\n    default:\n      return InternalServerError\n    case 401:\n      return Unauthorized\n  }\n}\n\nconst internalError = err => {\n  if (err.errorCode) {\n    return err\n  }\n\n  if (err.originalError) {\n    return Unauthorized(err.originalError.message)\n  }\n\n  const errorLib = getErrorByStatusCode(err.statusCode || err.status || 500)\n\n  return errorLib(err.message || err.toString())\n}\n\nexport const errorHandling = err => {\n  if (err.statusCode) {\n    return internalError(err)\n  }\n\n  if (err instanceof UniqueViolationError) {\n    return {\n      type: err.name,\n      message: `${err.columns.toString().replace(/_/g, ' ')} already exist`,\n      statusCode: 403\n    }\n  }\n  if (err instanceof NotNullViolationError) {\n    return {\n      type: err.name,\n      message: `${err.column} cannot be null`,\n      statusCode: 400\n    }\n  }\n  if (err instanceof ForeignKeyViolationError) {\n    return {\n      type: err.name,\n      data: {\n        table: err.table,\n        constraint: err.constraint\n      },\n      statusCode: 409\n    }\n  }\n  if (err instanceof CheckViolationError) {\n    return {\n      type: err.name,\n      data: {\n        table: err.table,\n        constraint: err.constraint\n      },\n      statusCode: 400\n    }\n  }\n  if (err instanceof DataError) {\n    return {\n      type: err.name,\n      data: {},\n      statusCode: 400\n    }\n  }\n  if (err instanceof DBError) {\n    return {\n      type: 'UnknownDatabaseError',\n      data: {\n        message: err.message\n      },\n      statusCode: 500\n    }\n  }\n  return {\n    type: 'UnknownError',\n    data: {\n      message: err.message\n    },\n    statusCode: 500\n  }\n}\n"],"file":"errors.js"}